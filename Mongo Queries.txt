MONGOBD TRAINING
MODULE

ASSIGNMENT-1

Q1. db.movies.find({}).pretty()(
Q2. db.movies.find({writer: "Quentin Tarantino"}).pretty()
Q3. db.movies.find({"actors": "Brad Pitt"}).pretty()
Q4. db.movies.find({franchise: "The Hobbit"}).pretty()
Q5. db.movies.find({year: {$gte: 1990, $lte: 1999}}).pretty()
Q6. db.movies.find({$or:[{year:{$lte:2000}}, {year:{$gte:2010}}]}).pretty()

U1. db.movies.update({title: "The Hobbit: An Unexpected Journey"}, {$set: {synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."}})
U2. db.movies.update({title: "The Hobbit: The Desolation of Smaug"}, {$set: {synopsis: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."}})
U3: db.movies.update({title: "Pulp Fiction"}, {$push: {actors: "Samuel L. Jackson"}})

TS1: db.movies.find({synopsis: /.Bilbo./}).pretty()
TS2: db.movies.find({synopsis: /.Gandalf./}).pretty()
TS3: db.movies.find({$and: [{synopsis: /.Bilbo./}, {synopsis: /.^Gandalf./}]}).pretty()
db.movies.find({$and: [{synopsis: /Bilbo/}, {synopsis: {$not: /Gandalf/}}]}).pretty()
TS4: db.movies.find({$or: [{synopsis: /dwarves/}, {synopsis: /hobbit/}]}).pretty()
TS5:db.movies.find({$and: [{synopsis: /gold/}, {synopsis: /dragon/}]}).pretty()

D1: db.movies.remove({title: "Pee Wee Herman's Big Adventure"})
D2: db.movies.remove({title: "Avatar"})

R1: db.users.find({}).pretty()
R2: db.posts.find({}).pretty()
R3: db.posts.find({username: "GoodGuyGreg"}).pretty()
R4: db.posts.find({username: "ScumbagSteve"}).pretty()
R5: db.comments.find({}).pretty()
R6: db.comments.find({username: "GoodGuyGreg"}).pretty()
R7: db.comments.find({username: "ScumbagSteve"}).pretty()
R8: db.comments.find({post: db.posts.findOne({title: "Reports a bug in your code"})._id})

ASSIGNMENT-2

1.db.zipcodes.find({$and:[{city:"ATLANTA"},{state:"GA"}]})
2.db.zipcodes.aggregate([{$match: {$and:[{city:"ATLANTA"},{state:"GA"}]}}])
3.db.zipcodes.aggregate([{$match:{city:"ATLANTA"}}, {$group: {_id: {_id:"$_id"}}}, {$count: "zipcodes"} ])
4.db.zipcodes.aggregate([ {$match:{city:"ATLANTA"}}, {$group:{_id:"$city",totalpop:{$sum:"$pop"}}}])
5.db.zipcodes.aggregate([ {$group:{_id:"$state",totalpop:{$sum:"$pop"}}}])
6.db.zipcodes.aggregate([ {$sort:{population:-1}}])
7.db.zipcodes.aggregate([ {$group:{_id:"$state",totalpop:{$sum:"$pop"}}},{$sort:{totalpop:-1}},{ $limit:3}])
8.db.zipcodes.aggregate([{$group : {_id: "$city", num_tutorial :{$sum : "$pop"}}}]) 
9.db.zipcodes.aggregate([ {$group:{_id:"$city",totalpop:{$sum:"$pop"}}},{$sort:{totalpop:-1}}])
10. db.zipcodes.aggregate([ {$group:{_id:"$city",totalpop:{$sum:"$pop"}}},{$sort:{totalpop:-1}},{ $limit:3}])
11.db.zipcodes.aggregate([{$match:{state:"TX"}},{$group:{_id:{city:"$city",state:"$state"},totalpopulation:{$sum:"$pop"}}},{$sort:{totalpopulation:-1}},{$limit:3}])
12.db.zipcodes.aggregate( [{ $group: { _id: { state: "$state", city: "$city" }, pop: { $sum: "$pop" } } },{ $group: { _id: "$_id.state", avgCityPop: { $avg: "$pop" } } }] )
13. db.zipcodes.aggregate([ {$group:{_id:{state:"$state"},countpopulaion:{$avg:"$pop"}}},{$sort:{countpopulaion:-1}},{$limit:3}])

ASSIGNMENT-3

1.db.addresses.find();
2.db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1});
3.db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1,"_id":0});
4.db.addresses.find({},{"restaurant_id" : 1,"name":1,"borough":1,"address.zipcode" :1,"_id":0});
5.db.addresses.find({"borough": "Bronx"});
6.db.addresses.find({"borough": "Bronx"}).limit(5);
7.db.addresses.find({"borough": "Bronx"}).skip(5).limit(5);
8.db.addresses.find({grades : { $elemMatch:{"score":{$gt : 90}}}});
9.db.addresses.find({grades : { $elemMatch:{"score":{$gt : 80 , $lt :100}}}});
10.db.addresses.find({"address.coord" : {$lt : -95.754168}});
11.db.addresses.find(
               {$and:
                    [
                       {"cuisine" : {$ne :"American "}},
                       {"grades.score" : {$gt : 70}},
                       {"address.coord" : {$lt : -65.754168}}
                    ]
                }
                    );
12.db.addresses.find(
                           {
                             "cuisine" : {$ne : "American "},
                             "grades.score" :{$gt: 70},
                             "address.coord" : {$lt : -65.754168}
                            }
                     );
13.db.addresses.find( {
                             "cuisine" : {$ne : "American "},
                             "grades.grade" :"A",
                             "borough": {$ne : "Brooklyn"}
                       } 
                    ).sort({"cuisine":-1});
14.db.addresses.find( {
                             "cuisine" : {$ne : "American "},
                             "grades.grade" :"A",
                             "borough": {$ne : "Brooklyn"}
                       } 
                    ).sort({"cuisine":-1});
15.db.addresses.find(
{name: /ces$/},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);
16.db.addresses.find(
{"name": /.*Reg.*/},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);
17.db.addresses.find(
{ 
"borough": "Bronx" , 
$or : [
{ "cuisine" : "American " },
{ "cuisine" : "Chinese" }
] 
} 
);
18.db.addresses.find(
{"borough" :{$in :["Staten Island","Queens","Bronx","Brooklyn"]}},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);
19.db.addresses.find(
{"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);
20.db.addresses.find(
{"grades.score" : 
{ $not: 
{$gt : 10}
}
},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);
21.db.addresses.find(
{$or: [
  {name: /^Wil/}, 
  {"$and": [
       {"cuisine" : {$ne :"American "}}, 
       {"cuisine" : {$ne :"Chinees"}}
   ]}
]}
,{"restaurant_id" : 1,"name":1,"borough":1,"cuisine" :1}
);
22.db.addresses.find( 
                {
                 "grades.date": ISODate("2014-08-11T00:00:00Z"), 
                 "grades.grade":"A" , 
                 "grades.score" : 11
                }, 
                {"restaurant_id" : 1,"name":1,"grades":1}
             );
23.db.addresses.find( 
                      { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), 
                        "grades.1.grade":"A" , 
                        "grades.1.score" : 9
                      }, 
                       {"restaurant_id" : 1,"name":1,"grades":1}
                   );
24.db.addresses.find( 
                      { "grades.1.date": ISODate("2014-08-11T00:00:00Z"), 
                        "grades.1.grade":"A" , 
                        "grades.1.score" : 9
                      }, 
                       {"restaurant_id" : 1,"name":1,"grades":1}
                   );
25.db.addresses.find().sort({"name":1});
26.db.addresses.find().sort(
                          {"name":-1}
                          );
27.db.addresses.find().sort(
                           {"cuisine":1,"borough" : -1,}
                          );
28.db.addresses.find(
                     {"address.street" : 
                         { $exists : true } 
                     } 
                   );
29.db.addresses.find(
                    {"address.coord" : 
                       {$type : 1}
                    }
                   );
30.
db.addresses.find(
                      {"grades.score" :
                         {$mod : [7,0]}
                      },
                         {"restaurant_id" : 1,"name":1,"grades":1}
                    );
31.db.addresses.find(
                   { name : 
                     { $regex : "mon.*", $options: "i" } 
                   },
                       {
                         "name":1,
                         "borough":1,
                         "address.coord":1,
                         "cuisine" :1
                        }
                   );
32.db.addresses.find(
                   { name : 
                     { $regex : /^Mad/i, } 
                   },
                       {
                         "name":1,
                         "borough":1,
                         "address.coord":1,
                         "cuisine" :1
                        }
                   );